import telebot
from telebot import types
from config import BOT_TOKEN, MY_TELEGRAM_ID, SUPPORT_CONTACT
from database import DatabaseHandler
import datetime


# class for all bot functions
class TelegramBotHandler:
    def __init__(self):
        self.bot = telebot.TeleBot(BOT_TOKEN)
        # init database handling
        self.db = DatabaseHandler()
        # init object for information about user gathered from telegram message
        self.client_data = {}

    def run(self):
        # Bot await for our actions
        self.bot.polling(none_stop=True, interval=0, timeout=600)

    # handling /start function in bot, register new user in bot and show welcome message
    # Output the buttons keyboard for user interacting
    def start_command(self, message):
        markup = types.ReplyKeyboardMarkup(row_width=1)
        markup.add("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å–ª—É–≥–∏", "–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏")
        self.bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤—ñ—Ç! üëã\n"
            "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ Telegram-–±–æ—Ç–∞!\n"
            " –¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∑–∞–º–æ–≤–∏—Ç–∏ –Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –Ω–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ñ–≤.\n"
            "üì¶ –©–æ –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ?\n"
            "–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
            "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ñ–≤\n"
            "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö —Ä—ñ—à–µ–Ω—å –¥–ª—è –≤–∞—à–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É\n"
            "üåê –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥ .\n"
            "üí¨ –Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞—à–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.\n"
            "üéØ –ì–æ—Ç–æ–≤—ñ –∑–∞–º–æ–≤–∏—Ç–∏? –ü—Ä–æ—Å—Ç–æ –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –ø–æ—Å–ª—É–≥—É, —ñ –º–∏ –≤—Å–µ –∑—Ä–æ–±–∏–º–æ –∑–∞ –≤–∞—Å!\n"
            "–†–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞—à–æ–º—É –±—ñ–∑–Ω–µ—Å—É –∑—Ä–æ—Å—Ç–∞—Ç–∏! üöÄ",
            reply_markup=markup
        )
        user_id = message.from_user.id
        name = None
        email = None
        phone = None
        self.db.save_user(user_id,name,message.from_user.username,email,phone)
    # list of all services from database
    def show_services(self, message):
        # get list of services from database
        services = self.db.get_services()
        markup = types.InlineKeyboardMarkup()
        # showing each service one-by-one
        for service in services:
            markup.add(types.InlineKeyboardButton(service['service_name'], callback_data=str(service['service_id'])))
        self.bot.send_message(message.chat.id, "–û—Å—å —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –ø–æ—Å–ª—É–≥. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ:",
                              reply_markup=markup)

    # handling chosen service
    def select_service(self, call):
        # –í–∏–±—ñ—Ä –ø–æ—Å–ª—É–≥–∏, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        user_id = call.from_user.id
        services = self.db.get_services()
        # return first mathing service id in database
        service = next((s for s in services if str(s['service_id']) == call.data), None)
        if service:
            # save what exactly service been chosen
            self.client_data[user_id] = {'service': service['service_name']}
            # add keyboard and buttons
            markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            markup.add("–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É", "–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å–ª—É–≥–∏", "–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏")
            # send info message about chosen service
            self.bot.send_message(
                call.message.chat.id,
                f"–í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ—Å–ª—É–≥—É: {service['service_name']}.\n"
                f"–û–ø–∏—Å –ø–æ—Å–ª—É–≥–∏: {service['service_p']}\n"
                f"–¶—ñ–Ω–∞: {service['service_price']}\n –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=markup
            )

    # return url of chosen service
    def more_about_service(self, message):
        user_id = message.from_user.id
        # looking for chosen service
        selected_service = self.client_data[user_id]['service'] if user_id in self.client_data else None
        # return list of all services
        services = self.db.get_services()  # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥
        service_url = "URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        # looking for service url of our interest
        for service in services:
            if service['service_name'] == selected_service:
                service_url = service['service_url']
                break

        # send message with service url
        self.bot.send_message(
            chat_id=message.chat.id,
            text=f"–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –ø–æ—Å–ª—É–≥—É: {service_url}"
        )

    # asking data from user for completing order
    def request_user_data(self, message):
        user_id = message.from_user.id
        if user_id in self.client_data:
            markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            markup.add("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å–ª—É–≥–∏", "–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏")
            self.bot.send_message(
                message.chat.id,
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ –∫–æ–º—É:\n"
                "–Ü–º'—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞:",
                reply_markup=markup
            )
            # run another function to check data correct input and sent data to admin
            self.bot.register_next_step_handler(message, self.process_order)

    # check if input from user is correct
    # save new order in database
    # send a message to admin about new order
    def process_order(self, message):
        user_id = message.from_user.id
        try:
            if user_id in self.client_data:
                name, phone, email = [s.strip() for s in message.text.split(",")]
                self.client_data[user_id].update({'name': name, 'phone': phone, 'email': email})
                # save to database
                self.db.save_user(user_id, name, message.from_user.username, email, phone)
                self.db.save_order(user_id, self.client_data[user_id]['service'], datetime.datetime.now())

                # send message about order to admin
                order_details = (
                    f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n"
                    f"–Ü–º'—è: {name}\n"
                    f"–¢–µ–ª–µ–≥—Ä–∞–º –Ω—ñ–∫: {message.from_user.first_name}\n"
                    f"–¢–µ–ª–µ–≥—Ä–∞–º —Ç–µ–≥: @{message.from_user.username}\n"
                    f"–ü–æ—Å–ª—É–≥–∞: {self.client_data[user_id]['service']}\n"
                    f"Email: {email}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                )
                self.bot.send_message(MY_TELEGRAM_ID, order_details)
                self.bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏.")
        # for data inputted in wrong format
        except ValueError:
            self.bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è, —Ç–µ–ª–µ—Ñ–æ–Ω, email.")
            self.request_user_data(message)  # recall previous function

    def handle_callback(self, call):
        # callback for selected service
        if call.data.isdigit():
            self.select_service(call)

    def support_contact(self, message):
        self.bot.send_message(message.chat.id, f"–ü—ñ–¥—Ç—Ä–∏–º–∫–∞: {SUPPORT_CONTACT}")

    # handler for each command
    def register_handlers(self):
        self.bot.message_handler(commands=["start"])(self.start_command)
        self.bot.message_handler(func=lambda m: m.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å–ª—É–≥–∏")(self.show_services)
        self.bot.message_handler(func=lambda m: m.text == "–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ")(self.more_about_service)
        self.bot.message_handler(func=lambda m: m.text == "–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏")(self.support_contact)
        self.bot.callback_query_handler(func=lambda call: True)(self.handle_callback)
        self.bot.message_handler(func=lambda m: m.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É")(self.request_user_data)
