import datetime
import time
import os
from dotenv import load_dotenv
import telebot
from telebot import types
import requests
from bs4 import BeautifulSoup
import sqlite3
import re

load_dotenv()

bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))
MY_TELEGRAM_ID = os.getenv("MY_TELEGRAM_ID")
SUPPORT_CONTACT = os.getenv("SUPPORT_CONTACT")
base_url = os.getenv("BASE_URL")

conn = sqlite3.connect('business.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute(
    '''
    CREATE TABLE IF NOT EXISTS users(
        telegram_id INTEGER PRIMARY KEY,
        first_name TEXT,
        telegram_tag TEXT,
        email TEXT,
        phone_number TEXT)
    '''
)

cursor.execute('''
CREATE TABLE IF NOT EXISTS orders(
    order_id INTEGER PRIMARY KEY AUTOINCREMENT ,
    telegram_id INTEGER,
    service TEXT,
    order_date TIMESTAMP,
    FOREIGN KEY(telegram_id) REFERENCES users(telegram_id)
    )
''')

conn.commit()

client_data = {}


def get_services():
    cursor.execute('''
        SELECT service_id,service_name, service_price, service_url, service_p FROM pages
    ''')
    services = cursor.fetchall()  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ä—è–¥–∫—ñ–≤ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑–∞–ø–∏—Ç—É

    services_dict = [
        {"service_id": row[0], "service_name": row[1], "service_price": row[2], "service_url": row[3],
         "service_p": row[4]}
        for row in services
    ]
    return services_dict


services = get_services()


class ClientOrder:
    def __init__(self):
        self.service = None
        self.email = None
        self.phone_number = None
        self.name = None


client_data = {}


# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(row_width=1)
    price_button = types.KeyboardButton('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å–ª—É–≥–∏')
    support_button = types.KeyboardButton('–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏')
    markup.add(price_button, support_button)

    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤—ñ—Ç! üëã\n"
                     "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ Telegram-–±–æ—Ç–∞!\n"
                     " –¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∑–∞–º–æ–≤–∏—Ç–∏ –Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –Ω–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ñ–≤.\n"
                     "üì¶ –©–æ –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ?\n"
                     "–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
                     "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ñ–≤\n"
                     "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö —Ä—ñ—à–µ–Ω—å –¥–ª—è –≤–∞—à–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É\n"
                     "üåê –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥ .\n"
                     "üí¨ –Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞—à–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.\n"
                     "üéØ –ì–æ—Ç–æ–≤—ñ –∑–∞–º–æ–≤–∏—Ç–∏? –ü—Ä–æ—Å—Ç–æ –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –ø–æ—Å–ª—É–≥—É, —ñ –º–∏ –≤—Å–µ –∑—Ä–æ–±–∏–º–æ –∑–∞ –≤–∞—Å!\n"
                     "–†–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞—à–æ–º—É –±—ñ–∑–Ω–µ—Å—É –∑—Ä–æ—Å—Ç–∞—Ç–∏! üöÄ", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏')
def support(message):
    bot.send_message(message.chat.id,
                     f"–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å—é–¥–∏, —è–∫—â–æ —É –≤–∞—Å —î —è–∫—ñ—Å—å –ø–∏—Ç–∞–Ω–Ω—è:https://t.me/AlexGlazoff")


@bot.message_handler(func=lambda message: message.text == '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å–ª—É–≥–∏')
def show_prices(message):
    markup = types.InlineKeyboardMarkup()

    # –î–æ–¥–∞—î–º–æ 34 –∫–Ω–æ–ø–∫–∏
    for service in services:
        service_id, service_name, service_price, service_url, service_p = service
        button = types.InlineKeyboardButton(f"{service['service_name']}", callback_data=str(service['service_id']))
        markup.add(button)  # –î–æ–¥–∞—î–º–æ –∫–æ–∂–Ω—É –∫–Ω–æ–ø–∫—É –≤ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    bot.send_message(message.chat.id, "–û—Å—å —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –Ω–∞—à–∏—Ö –ø–æ—Å–ª—É–≥. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –±—É–¥—å-—è–∫—É —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ:",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def button_handler(call: types.CallbackQuery):
    callback_data = call.data
    user_id = call.from_user.id

    selected_services = None
    for service in services:
        if str(service['service_id']) == callback_data:
            selected_services = service
            break
    if selected_services:
        client_data[user_id] = ClientOrder()
        client_data[user_id].service = selected_services['service_name']
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∑–≤–∏—á–∞–π–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É (ReplyKeyboardMarkup)
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button1 = types.KeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É")
        button2 = types.KeyboardButton("–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ")
        back_button = types.KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å–ª—É–≥–∏")
        support_button = types.KeyboardButton('–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏')
        markup.add(button1, button2, back_button, support_button)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        bot.send_message(
            chat_id=call.message.chat.id,
            text=f"–í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ—Å–ª—É–≥—É {selected_services['service_name']}.\n"
                 f"{selected_services['service_p']}\n"
                 f"–¶—ñ–Ω–∞ —Ü—ñ—î—ó –ø–æ—Å–ª—É–≥–∏: {selected_services['service_price']}\n"
                 f" –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=markup
        )


# –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫–∏ "–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É" –∞–±–æ "–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ"
@bot.message_handler(func=lambda message: message.text in "–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É")
def handle_service_options(message):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup()
    back_button = types.KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å–ª—É–≥–∏")
    support_button = types.KeyboardButton('–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏')
    markup.add(back_button, support_button)
    if user_id in client_data:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω–Ω—ñ —á–µ—Ä–µ–∑ –∫–æ–º—É:\n"
                                          "–Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è:\n"
                                          "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
                                          "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞:", reply_markup=markup)
        if "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å–ª—É–≥–∏" in message.text:
            bot.register_next_step_handler(message, show_prices)
        bot.register_next_step_handler(message, order_complete)


def order_complete(message):
    user_id = message.from_user.id
    try:
        if user_id in client_data:
            client_data[user_id].name = message.text.split(",")[0].strip()
            client_data[user_id].phone_number = message.text.split(",")[1].strip()
            client_data[user_id].email = message.text.split(",")[2].strip()
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
            cursor.execute('''
                INSERT OR REPLACE INTO users (telegram_id, first_name, telegram_tag, email, phone_number)
                VALUES(?, ?, ?, ?, ?)
            ''', (
                user_id,
                message.from_user.first_name,
                message.from_user.username,
                client_data[user_id].email,
                client_data[user_id].phone_number
            ))
            conn.commit()
            cursor.execute('''
                INSERT INTO orders (telegram_id,service,order_date)
                VALUES ((SELECT telegram_id FROM users WHERE telegram_id = ?),?,?)
            ''', (
                user_id,
                client_data[user_id].service,
                datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ))
            conn.commit()
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∞—Å —ñ–∑ –∑—ñ–±—Ä–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            order_details = (f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! \n"
                             f"–∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è —è–∫:{client_data[user_id].name}\n"
                             f"–¢–µ–ª–µ–≥—Ä–∞–º –Ω—ñ–∫: {message.from_user.first_name}\n"
                             f"–¢–µ–ª–µ–≥—Ä–∞–º —Ç–µ–≥: {message.from_user.username}\n"
                             f"–ü–æ—Å–ª—É–≥–∞: {client_data[user_id].service}\n"
                             f"Email: {client_data[user_id].email}\n"
                             f"–¢–µ–ª–µ—Ñ–æ–Ω: {client_data[user_id].phone_number}")
            bot.send_message(MY_TELEGRAM_ID, order_details)
            bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
    except IndexError:
        return 0


@bot.message_handler(func=lambda message: message.text == "–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ")
def more_about_service(message):
    user_id = message.from_user.id
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –ø–æ—Å–ª—É–≥—É –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    selected_service = client_data[user_id].service if user_id in client_data else None

    # –®—É–∫–∞—î–º–æ URL –¥–ª—è –ø–æ—Å–ª—É–≥–∏
    for service in services:
        if service['service_name'] == selected_service:
            service_url = service['service_url']
            break
    else:
        service_url = "URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç –ø–æ—Å–ª—É–≥–∏
    bot.send_message(
        chat_id=message.chat.id,
        text=f"–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –ø–æ—Å–ª—É–≥—É: {service_url}"
    )


@bot.message_handler(func=lambda message: message.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å–ª—É–≥–∏")
def go_back(message):
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥
    markup = types.InlineKeyboardMarkup()

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏
    for service in services:
        button = types.InlineKeyboardButton(f"{service['service_name']}", callback_data=str(service['service_id']))
        markup.add(button)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    bot.send_message(message.chat.id, "–û—Å—å —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –Ω–∞—à–∏—Ö –ø–æ—Å–ª—É–≥. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –±—É–¥—å-—è–∫—É, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ:",
                     reply_markup=markup)


bot.polling(none_stop=True)
