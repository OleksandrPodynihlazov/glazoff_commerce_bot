import threading
import time

import telebot
from telebot import types
import requests
from bs4 import BeautifulSoup
import sqlite3


bot = telebot.TeleBot("7336652335:AAFbiaChNn64qJ9g8x5sSPpYlOeZuESPWBs")
channel_name = "@glazoff_tg"
base_url = 'https://glazoff.com/product-category/poslugy-dlya-internet-magazyniv/'
server_url = 'http://127.0.0.1:5000/track/'
total_pages = 3
class User:
    def __init__(self,user_id,first_name,telegram_name):
        self.user_id = user_id
        self.first_name = first_name
        self.telegram_name = telegram_name
#–û–±—Ä–æ–±–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(row_width=1)
    price_button = types.KeyboardButton('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å–ª—É–≥–∏')
    markup.add(price_button)
    price_button = types.KeyboardButton('FAQ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞')
    markup.add(price_button)
    price_button = types.KeyboardButton('–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É')
    markup.add(price_button)

    global user
    user=User(message.from_user.id,message.from_user.first_name,message.from_user.username)
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤—ñ—Ç! üëã "
                          "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ Telegram-–±–æ—Ç–∞!"
                          " –¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∑–∞–º–æ–≤–∏—Ç–∏ –Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –Ω–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ñ–≤."
                          "üì¶ –©–æ –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ?"
                          "–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"
                            "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ñ–≤"
                            "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö —Ä—ñ—à–µ–Ω—å –¥–ª—è –≤–∞—à–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É"
                            "üåê –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥ ."
                            "üí¨ –Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞—à–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é."
                            "üéØ –ì–æ—Ç–æ–≤—ñ –∑–∞–º–æ–≤–∏—Ç–∏? –ü—Ä–æ—Å—Ç–æ –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –ø–æ—Å–ª—É–≥—É, —ñ –º–∏ –≤—Å–µ –∑—Ä–æ–±–∏–º–æ –∑–∞ –≤–∞—Å!"
                            "–†–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞—à–æ–º—É –±—ñ–∑–Ω–µ—Å—É –∑—Ä–æ—Å—Ç–∞—Ç–∏! üöÄ", reply_markup=markup)
    log_user()

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∑ –º–µ–Ω—é –¥–æ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ —Ü—ñ–Ω
@bot.message_handler(func=lambda message: message.text == '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å–ª—É–≥–∏')
def show_prices(message):

    markup = types.ReplyKeyboardMarkup(row_width=1)
    button1 = types.KeyboardButton("–°—Ç–æ—Ä—ñ–Ω–∫–∞ 1")
    button2 = types.KeyboardButton("–°—Ç–æ—Ä—ñ–Ω–∫–∞ 2")
    button3 = types.KeyboardButton("–°—Ç–æ—Ä—ñ–Ω–∫–∞ 3")
    markup.add(button1,button2,button3)

    bot.send_message(message.chat.id,'–û–±–µ—Ä—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É' , reply_markup=markup)
@bot.message_handler(func=lambda message: message.text == 'FAQ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞')
def faq(message):
    markup = types.ReplyKeyboardMarkup(row_width=1)
    bot.send_message(message.chat.id,"",reply_markup=markup)
@bot.message_handler(func=lambda message: message.text == '–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É')
#–î–æ–±–∞–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥ —É –º–µ–Ω—é

#–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑—ñ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ—Å–ª—É–≥
@bot.message_handler(func=lambda message: message.text in ['–°—Ç–æ—Ä—ñ–Ω–∫–∞ 1','–°—Ç–æ—Ä—ñ–Ω–∫–∞ 2','–°—Ç–æ—Ä—ñ–Ω–∫–∞ 3'])
def handle_prices(message):
    chat_id = message.chat.id
    for users in load_users():
        if message.from_user.id == users:
            scraped_data = scrape_page(base_url,total_pages,users)
    if message.text == '–°—Ç–æ—Ä—ñ–Ω–∫–∞ 1':
        selected_products = scraped_data[:12]
    elif message.text == '–°—Ç–æ—Ä—ñ–Ω–∫–∞ 2':
        selected_products = scraped_data[12:24]
    else:
        selected_products = scraped_data[24:36]
    product_messages = "".join(selected_products)
    bot.send_message(chat_id,product_messages,parse_mode="Markdown")
@bot.message_handler(commands=['chat_redirection'])
def chat_redirection(message):
    developer_link = "https://t.me/AlexGlazoff"
    bot.send_message(message.chat.id,f"click that link {developer_link}")
#–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–µ–± —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
def get_data(url):
    response = requests.get(url)
    if response.status_code == 200:
        return BeautifulSoup(response.text,'html.parser')
    else:
        print(f"Webpage downloading error {url}")
        return None
#–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –≤–µ–± —Å—Ç–æ—Ä—ñ–Ω–∫–∏
def scrape_page(base_url,total_pages,user_id):
    results = []

    for page in range(1,total_pages+1):
        url = f'{base_url}/page/{page}'
        soup = get_data(url)

        if soup:
            services = soup.find("ul", class_="products columns-4")
            services = services.find_all("li")
            for service in services:
                service_name_tag = service.find("h2")
                service_name = service_name_tag.text.strip()
                service_price_tag = service.find("span", class_="price")
                service_url_tag = service.find("a")
                service_url = service_url_tag["href"]
                if service_price_tag.find("ins"):
                    service_price_tag = service_price_tag.find("ins")
                    service_price_tag = service_price_tag.find("bdi")
                service_price = service_price_tag.text.strip()
                results.append(f"[{service_name}]({server_url}{service_url.replace('https://','')}?user_id={user_id}): {service_price}\n\n")

    return results

def load_users():
    connection = sqlite3.connect('click.db')
    cursor = connection.cursor()
    cursor.execute('''
    SELECT user_id FROM click
    ''')
    user_id_list = cursor.fetchall()
    user_id_list = [users[0] for users in user_id_list]
    connection.commit()
    connection.close()
    return user_id_list
def send_ads(user_id_list):
    for user in user_id_list:
        time.sleep(10)
        try:
            bot.send_message(user,"–¢—É—Ç –º–æ–≥–ª–∞ –±—É—Ç–∏ –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞")
        except Exception as e:
            print(f"Failed to send message to user: {user} :{e}")
#—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_db():
    connection = sqlite3.connect('click.db')
    cursor = connection.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS click (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            first_name TEXT,
            telegram_name TEXT,
            link_id TEXT
            )
    ''')
    connection.commit()
    connection.close()
#—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
def log_user():
    connection = sqlite3.connect('click.db')
    cursor = connection.cursor()
    cursor.execute('''
    INSERT OR IGNORE INTO click (user_id, first_name, telegram_name, link_id)
    VALUES(?, ?, ?, ?)
    ''',(user.user_id,user.first_name,user.telegram_name,''))
    connection.commit()
    connection.close()



init_db()
load_users()
#send_ads(load_users())
threading.Thread(target=send_ads(load_users())).start()
bot.polling(none_stop=True)
